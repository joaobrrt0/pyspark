{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMMQEcrVYrZMkItvjCmUfmO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/joaobrrt0/pyspark/blob/main/pyspark_collab\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fiBgxTwI47XZ",
        "outputId": "0bf0aee5-e138-4e14-d8d8-c2b5866be95f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pyspark in /usr/local/lib/python3.12/dist-packages (3.5.1)\n",
            "Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.12/dist-packages (from pyspark) (0.10.9.7)\n"
          ]
        }
      ],
      "source": [
        "!pip install pyspark"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pyspark.sql import SparkSession\n",
        "from pyspark.sql.functions import *"
      ],
      "metadata": {
        "id": "C_bN0ytu5KOm"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#criar_spark_session\n",
        "spark = SparkSession.builder.appName(\"Empresa\").getOrCreate()\n",
        "\n",
        "data = [\n",
        "    (1, \"Alice\", 25, \"F\", 5),\n",
        "    (2, \"Bob\", 30, \"M\", 5),\n",
        "    (3, \"Charlie\", 28, \"M\", 3),\n",
        "    (4, \"David\", 35, \"M\", 11),\n",
        "    (5, \"Eve\", 22, \"F\", 10),\n",
        "    (6, \"Fiona\", 29, \"F\", 5),\n",
        "    (7, \"George\", 31, \"M\", 4),\n",
        "    (8, \"Helen\", 27, \"F\", 3),\n",
        "    (9, \"Ian\", 33, \"M\", 17),\n",
        "    (10, \"Jane\", 26, \"F\", 18),\n",
        "    (11, \"Kevin\", 34, \"M\", 2),\n",
        "    (12, \"Linda\", 23, \"F\", 1),\n",
        "    (13, \"Mike\", 32, \"M\", 9),\n",
        "    (14, \"Nancy\", 28, \"F\", 8),\n",
        "    (15, \"Oliver\", 36, \"M\", 6),\n",
        "    (16, \"Patricia\", 24, \"F\", 13),\n",
        "    (17, \"Quentin\", 31, \"M\", 15),\n",
        "    (18, \"Rachel\", 29, \"F\", 16),\n",
        "    (19, \"Steve\", 35, \"M\", 4),\n",
        "    (20, \"Tina\", 27, \"F\", 4)\n",
        "]\n",
        "people_df = spark.createDataFrame(data, [\"person_id\", \"name\", \"age\", \"gender\", \"job_id\"])\n",
        "\n",
        "\n",
        "data =[\n",
        "    (1, \"Manager\", 60000),\n",
        "(2, \"Developer\", 50000),\n",
        "(3, \"Analyst\", 45000),\n",
        "(4, \"Designer\", 55000),\n",
        "(5, \"Tester\", 40000),\n",
        "(6, \"Sales Representative\", 48000),\n",
        "(7, \"Marketing Specialist\", 52000),\n",
        "(8, \"Accountant\", 50000),\n",
        "(9, \"HR Officer\", 47000),\n",
        "(10, \"Operations Manager\", 62000),\n",
        "(11, \"Project Manager\", 65000),\n",
        "(12, \"Data Scientist\", 70000),\n",
        "(13, \"Business Analyst\", 53000),\n",
        "(14, \"IT Support\", 42000),\n",
        "(15, \"Customer Service\", 43000),\n",
        "(16, \"Executive Assistant\", 51000),\n",
        "(17, \"Legal Counsel\", 80000),\n",
        "(18, \"Financial Analyst\", 57000),\n",
        "(19, \"Research Scientist\", 75000),\n",
        "(20, \"Intern\", 46000)\n",
        "]\n",
        "\n",
        "\n",
        "\n",
        "jobs_df = spark.createDataFrame(data, [\"job_id\", \"job_title\", \"salary\"])\n",
        "\n",
        "#mostrar_dataframe\n",
        "\n",
        "people_df.show()\n",
        "jobs_df.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "axoQwxKP5VxX",
        "outputId": "fe504555-f158-4639-c75c-9443cddbe036"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+---------+--------+---+------+------+\n",
            "|person_id|    name|age|gender|job_id|\n",
            "+---------+--------+---+------+------+\n",
            "|        1|   Alice| 25|     F|     5|\n",
            "|        2|     Bob| 30|     M|     5|\n",
            "|        3| Charlie| 28|     M|     3|\n",
            "|        4|   David| 35|     M|    11|\n",
            "|        5|     Eve| 22|     F|    10|\n",
            "|        6|   Fiona| 29|     F|     5|\n",
            "|        7|  George| 31|     M|     4|\n",
            "|        8|   Helen| 27|     F|     3|\n",
            "|        9|     Ian| 33|     M|    17|\n",
            "|       10|    Jane| 26|     F|    18|\n",
            "|       11|   Kevin| 34|     M|     2|\n",
            "|       12|   Linda| 23|     F|     1|\n",
            "|       13|    Mike| 32|     M|     9|\n",
            "|       14|   Nancy| 28|     F|     8|\n",
            "|       15|  Oliver| 36|     M|     6|\n",
            "|       16|Patricia| 24|     F|    13|\n",
            "|       17| Quentin| 31|     M|    15|\n",
            "|       18|  Rachel| 29|     F|    16|\n",
            "|       19|   Steve| 35|     M|     4|\n",
            "|       20|    Tina| 27|     F|     4|\n",
            "+---------+--------+---+------+------+\n",
            "\n",
            "+------+--------------------+------+\n",
            "|job_id|           job_title|salary|\n",
            "+------+--------------------+------+\n",
            "|     1|             Manager| 60000|\n",
            "|     2|           Developer| 50000|\n",
            "|     3|             Analyst| 45000|\n",
            "|     4|            Designer| 55000|\n",
            "|     5|              Tester| 40000|\n",
            "|     6|Sales Representative| 48000|\n",
            "|     7|Marketing Specialist| 52000|\n",
            "|     8|          Accountant| 50000|\n",
            "|     9|          HR Officer| 47000|\n",
            "|    10|  Operations Manager| 62000|\n",
            "|    11|     Project Manager| 65000|\n",
            "|    12|      Data Scientist| 70000|\n",
            "|    13|    Business Analyst| 53000|\n",
            "|    14|          IT Support| 42000|\n",
            "|    15|    Customer Service| 43000|\n",
            "|    16| Executive Assistant| 51000|\n",
            "|    17|       Legal Counsel| 80000|\n",
            "|    18|   Financial Analyst| 57000|\n",
            "|    19|  Research Scientist| 75000|\n",
            "|    20|              Intern| 46000|\n",
            "+------+--------------------+------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#selecionar colunas (select)\n",
        "people_df.select(\"name\", \"age\").show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RHwh9g6t6Uyx",
        "outputId": "2d2111f1-29a8-47ac-ae6a-df5419873649"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------+---+\n",
            "|    name|age|\n",
            "+--------+---+\n",
            "|   Alice| 25|\n",
            "|     Bob| 30|\n",
            "| Charlie| 28|\n",
            "|   David| 35|\n",
            "|     Eve| 22|\n",
            "|   Fiona| 29|\n",
            "|  George| 31|\n",
            "|   Helen| 27|\n",
            "|     Ian| 33|\n",
            "|    Jane| 26|\n",
            "|   Kevin| 34|\n",
            "|   Linda| 23|\n",
            "|    Mike| 32|\n",
            "|   Nancy| 28|\n",
            "|  Oliver| 36|\n",
            "|Patricia| 24|\n",
            "| Quentin| 31|\n",
            "|  Rachel| 29|\n",
            "|   Steve| 35|\n",
            "|    Tina| 27|\n",
            "+--------+---+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#filtrar dados (filter)\n",
        "people_df.filter((col(\"age\") > 30) & (col(\"person_id\") > 5)).show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-5THRiPo6VE-",
        "outputId": "9a73684d-2c98-41cc-a26c-b66cd3b513ba"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+---------+-------+---+------+------+\n",
            "|person_id|   name|age|gender|job_id|\n",
            "+---------+-------+---+------+------+\n",
            "|        7| George| 31|     M|     4|\n",
            "|        9|    Ian| 33|     M|    17|\n",
            "|       11|  Kevin| 34|     M|     2|\n",
            "|       13|   Mike| 32|     M|     9|\n",
            "|       15| Oliver| 36|     M|     6|\n",
            "|       17|Quentin| 31|     M|    15|\n",
            "|       19|  Steve| 35|     M|     4|\n",
            "+---------+-------+---+------+------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#agrupar dados (groupby)\n",
        "#agregar (agg)\n",
        "people_df.groupBy(\"gender\").agg(avg(\"age\")).show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U5Qhs_Nt6VPG",
        "outputId": "66e5f28f-22b9-4434-ebc0-0ab7efb0484c"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------+--------+\n",
            "|gender|avg(age)|\n",
            "+------+--------+\n",
            "|     F|    26.0|\n",
            "|     M|    32.5|\n",
            "+------+--------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#ordenar dados\n",
        "people_df.orderBy(\"age\", ascendings=False).show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SWd49crq8x-a",
        "outputId": "73722b37-1b93-47e9-b0aa-9811a297b5a4"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+---------+--------+---+------+------+\n",
            "|person_id|    name|age|gender|job_id|\n",
            "+---------+--------+---+------+------+\n",
            "|        5|     Eve| 22|     F|    10|\n",
            "|       12|   Linda| 23|     F|     1|\n",
            "|       16|Patricia| 24|     F|    13|\n",
            "|        1|   Alice| 25|     F|     5|\n",
            "|       10|    Jane| 26|     F|    18|\n",
            "|       20|    Tina| 27|     F|     4|\n",
            "|        8|   Helen| 27|     F|     3|\n",
            "|       14|   Nancy| 28|     F|     8|\n",
            "|        3| Charlie| 28|     M|     3|\n",
            "|       18|  Rachel| 29|     F|    16|\n",
            "|        6|   Fiona| 29|     F|     5|\n",
            "|        2|     Bob| 30|     M|     5|\n",
            "|       17| Quentin| 31|     M|    15|\n",
            "|        7|  George| 31|     M|     4|\n",
            "|       13|    Mike| 32|     M|     9|\n",
            "|        9|     Ian| 33|     M|    17|\n",
            "|       11|   Kevin| 34|     M|     2|\n",
            "|        4|   David| 35|     M|    11|\n",
            "|       19|   Steve| 35|     M|     4|\n",
            "|       15|  Oliver| 36|     M|     6|\n",
            "+---------+--------+---+------+------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "people_df.groupBy(\"gender\").count().show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F3ohb2utAHXj",
        "outputId": "f4fa22e1-2cf3-440f-ab67-ed05b7802554"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------+-----+\n",
            "|gender|count|\n",
            "+------+-----+\n",
            "|     F|   10|\n",
            "|     M|   10|\n",
            "+------+-----+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#juntar dataframes\n",
        "people_df.alias('dfp').join(jobs_df.alias('dfj'), col('dfp.job_id') == col('dfj.job_id'), \"inner\").show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0GNNE75XX7bI",
        "outputId": "e24a8a6d-faae-4450-8e0c-dbce0da73756"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+---------+--------+---+------+------+------+--------------------+------+\n",
            "|person_id|    name|age|gender|job_id|job_id|           job_title|salary|\n",
            "+---------+--------+---+------+------+------+--------------------+------+\n",
            "|       12|   Linda| 23|     F|     1|     1|             Manager| 60000|\n",
            "|       11|   Kevin| 34|     M|     2|     2|           Developer| 50000|\n",
            "|        3| Charlie| 28|     M|     3|     3|             Analyst| 45000|\n",
            "|        8|   Helen| 27|     F|     3|     3|             Analyst| 45000|\n",
            "|        7|  George| 31|     M|     4|     4|            Designer| 55000|\n",
            "|       19|   Steve| 35|     M|     4|     4|            Designer| 55000|\n",
            "|       20|    Tina| 27|     F|     4|     4|            Designer| 55000|\n",
            "|        1|   Alice| 25|     F|     5|     5|              Tester| 40000|\n",
            "|        2|     Bob| 30|     M|     5|     5|              Tester| 40000|\n",
            "|        6|   Fiona| 29|     F|     5|     5|              Tester| 40000|\n",
            "|       15|  Oliver| 36|     M|     6|     6|Sales Representative| 48000|\n",
            "|       14|   Nancy| 28|     F|     8|     8|          Accountant| 50000|\n",
            "|       13|    Mike| 32|     M|     9|     9|          HR Officer| 47000|\n",
            "|        5|     Eve| 22|     F|    10|    10|  Operations Manager| 62000|\n",
            "|        4|   David| 35|     M|    11|    11|     Project Manager| 65000|\n",
            "|       16|Patricia| 24|     F|    13|    13|    Business Analyst| 53000|\n",
            "|       17| Quentin| 31|     M|    15|    15|    Customer Service| 43000|\n",
            "|       18|  Rachel| 29|     F|    16|    16| Executive Assistant| 51000|\n",
            "|        9|     Ian| 33|     M|    17|    17|       Legal Counsel| 80000|\n",
            "|       10|    Jane| 26|     F|    18|    18|   Financial Analyst| 57000|\n",
            "+---------+--------+---+------+------+------+--------------------+------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Outras possibilidades\n"
      ],
      "metadata": {
        "id": "R0qvyI81ZlqH"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DTtXo3IcaAyE"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#spark.read.csv(\"path\")\n",
        "#spark.write().mode().option()\n",
        "\n",
        "#criar uma view temporaria\n",
        "people_df.createOrReplaceTempView(\"people\")\n",
        "jobs_df.createOrReplaceTempView(\"jobs\")\n",
        "\n",
        "\n",
        "result_df = spark.sql(\"SELECT p.name, j.job_title FROM people p JOIN jobs j ON p.job_id = j.job_id\")\n",
        "result_df.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5SxFNmvLZlbm",
        "outputId": "e1b3c104-cb1e-475e-c352-e9c53c62ebb3"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------+--------------------+\n",
            "|    name|           job_title|\n",
            "+--------+--------------------+\n",
            "|   Linda|             Manager|\n",
            "|   Kevin|           Developer|\n",
            "| Charlie|             Analyst|\n",
            "|   Helen|             Analyst|\n",
            "|  George|            Designer|\n",
            "|   Steve|            Designer|\n",
            "|    Tina|            Designer|\n",
            "|   Alice|              Tester|\n",
            "|     Bob|              Tester|\n",
            "|   Fiona|              Tester|\n",
            "|  Oliver|Sales Representative|\n",
            "|   Nancy|          Accountant|\n",
            "|    Mike|          HR Officer|\n",
            "|     Eve|  Operations Manager|\n",
            "|   David|     Project Manager|\n",
            "|Patricia|    Business Analyst|\n",
            "| Quentin|    Customer Service|\n",
            "|  Rachel| Executive Assistant|\n",
            "|     Ian|       Legal Counsel|\n",
            "|    Jane|   Financial Analyst|\n",
            "+--------+--------------------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#Agrupar por idade e contar o numero de pessoas\n",
        "age_counts = people_df.groupBy(\"age\").count().orderBy(\"age\").collect()\n",
        "\n",
        "#Extrair as idades e as contagens\n",
        "ages = [row[\"age\"]for row in age_counts]\n",
        "counts = [row[\"count\"] for row in age_counts]\n",
        "\n",
        "#criar o grafico\n",
        "plt.plot(ages , counts)\n",
        "plt.xlabel(\"idade\")\n",
        "plt.ylabel(\"contagem\")\n",
        "plt.title(\"Distribuição de Idades\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "4TTPElkebYCg",
        "outputId": "91e2013d-5c01-4ce0-97cf-b25c6f60d5f2"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#LAZY EVALUATION\n",
        "#Avaliação preguiçosa significa que as operações no Dataframe não são executadas imediatamente\n",
        "#Em vez disso, um plano de execução e criado e as operações  são executadas apenas quando uma ação e chamada\n",
        "#isso permite otimizar o processo de consulta\n",
        "\n",
        "#exemplo\n",
        "#criando um datafram com uma transformação no filtro\n",
        "filtred_df =  people_df.filter(people_df['age']> 30)\n",
        "\n",
        "#A operação de filtro não e executada imediatamente\n",
        "#O spark cria um plano de execução para essa operação\n",
        "\n",
        "#Agora, chamando uma ação para executar o plano de execução\n",
        "filtred_df.show()\n",
        "\n",
        "#Diferença entre ação e Transformação\n",
        "\n",
        "# Transformação:\n",
        "# - Cria um novo Dataframe a partir de um Dataframe existente\n",
        "# - Não executa a operação imediatamente\n",
        "# - Exemplos : filter ,select, join, ordenby\n",
        "\n",
        "\n",
        "#Ação:\n",
        "# - Executa a operaçãp e retorna o resultado\n",
        "# - Exemplo: show, count, collect, write"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FoWEyyqpddIM",
        "outputId": "21b93f7d-80dc-4115-cdf4-2dfa20de3637"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+---------+-------+---+------+------+\n",
            "|person_id|   name|age|gender|job_id|\n",
            "+---------+-------+---+------+------+\n",
            "|        4|  David| 35|     M|    11|\n",
            "|        7| George| 31|     M|     4|\n",
            "|        9|    Ian| 33|     M|    17|\n",
            "|       11|  Kevin| 34|     M|     2|\n",
            "|       13|   Mike| 32|     M|     9|\n",
            "|       15| Oliver| 36|     M|     6|\n",
            "|       17|Quentin| 31|     M|    15|\n",
            "|       19|  Steve| 35|     M|     4|\n",
            "+---------+-------+---+------+------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Utiliza o metodo 'explain()' para visualizar o plano de execução de uma consulta\n",
        "#Isso ajuda a entender como o spark esta otimizando a consulta\n",
        "\n",
        "filtred_df = people_df.filter(people_df['age']> 30)\n",
        "filtred_df.explain()\n",
        "\n",
        "#Utilize o metodo 'withColumn()' para adicionar novas colunas a um Dataframe\n",
        "#Utilize nomes de colunas descritivos e consistentes\n",
        "\n",
        "people_df =(\n",
        "    people_df.withColumn(\n",
        "        \"age_category\",\n",
        "        when(col('age') < 30, \"Jovem\")\n",
        "        .when((col('age')>= 30) & (col('age') < 50), \"Adulto\")\n",
        "        .otherwise(\"Idoso\")\n",
        "    )\n",
        ")\n",
        "people_df.show()\n",
        "\n",
        "#Utilize o metodo 'filter()' para filtrar linhas em um Dataframe\n",
        "#Utlizando condições claras e precisas para filtrar os dados\n",
        "\n",
        "filtered_df = people_df.filter((col(\"age\")> 25)&(col(\"gender\")=='F'))\n",
        "\n",
        "#Utilize o metodo \"drop()\" para remover colunas de um Dataframe\n",
        "#Remova colunas que não são mais necessarias\n",
        "\n",
        "dropped_df = people_df.drop('new_age')\n",
        "\n",
        "#Utilize o metodo 'distinct()' para remover linhas duplicadas de um Dataframe\n",
        "\n",
        "distinct_df = people_df.distinct()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mVyFSTiInyKp",
        "outputId": "e366bd78-616c-4a83-9af1-4e0719d73005"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "== Physical Plan ==\n",
            "*(1) Project [person_id#0L, name#1, age#2L, gender#3, job_id#4L, CASE WHEN (age#2L < 30) THEN Jovem WHEN ((age#2L >= 30) AND (age#2L < 50)) THEN Adulto ELSE Idoso END AS age_category#303]\n",
            "+- *(1) Filter (isnotnull(age#2L) AND (age#2L > 30))\n",
            "   +- *(1) Scan ExistingRDD[person_id#0L,name#1,age#2L,gender#3,job_id#4L]\n",
            "\n",
            "\n",
            "+---------+--------+---+------+------+------------+\n",
            "|person_id|    name|age|gender|job_id|age_category|\n",
            "+---------+--------+---+------+------+------------+\n",
            "|        1|   Alice| 25|     F|     5|       Jovem|\n",
            "|        2|     Bob| 30|     M|     5|      Adulto|\n",
            "|        3| Charlie| 28|     M|     3|       Jovem|\n",
            "|        4|   David| 35|     M|    11|      Adulto|\n",
            "|        5|     Eve| 22|     F|    10|       Jovem|\n",
            "|        6|   Fiona| 29|     F|     5|       Jovem|\n",
            "|        7|  George| 31|     M|     4|      Adulto|\n",
            "|        8|   Helen| 27|     F|     3|       Jovem|\n",
            "|        9|     Ian| 33|     M|    17|      Adulto|\n",
            "|       10|    Jane| 26|     F|    18|       Jovem|\n",
            "|       11|   Kevin| 34|     M|     2|      Adulto|\n",
            "|       12|   Linda| 23|     F|     1|       Jovem|\n",
            "|       13|    Mike| 32|     M|     9|      Adulto|\n",
            "|       14|   Nancy| 28|     F|     8|       Jovem|\n",
            "|       15|  Oliver| 36|     M|     6|      Adulto|\n",
            "|       16|Patricia| 24|     F|    13|       Jovem|\n",
            "|       17| Quentin| 31|     M|    15|      Adulto|\n",
            "|       18|  Rachel| 29|     F|    16|       Jovem|\n",
            "|       19|   Steve| 35|     M|     4|      Adulto|\n",
            "|       20|    Tina| 27|     F|     4|       Jovem|\n",
            "+---------+--------+---+------+------+------------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter for females and select the age column\n",
        "fem_age = people_df.filter(col(\"gender\")=='F').select('age')\n",
        "fem_age.show()\n",
        "\n",
        "# Join people_df with jobs_df to get the salary information\n",
        "people_with_salary_df = people_df.join(jobs_df, people_df.job_id == jobs_df.job_id, \"inner\")\n",
        "\n",
        "# Now create the salary_category column using the joined DataFrame\n",
        "people_with_salary_df = (\n",
        "    people_with_salary_df.withColumn(\n",
        "        \"salary_category\",\n",
        "        when((col('salary') < 55000), \"Baixo\")\n",
        "        .when((col('salary') >= 55000) & (col('salary') < 70000), \"Medio\")\n",
        "        .otherwise(\"Alto\")\n",
        "    )\n",
        ")\n",
        "\n",
        "people_with_salary_df.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bcOBnJdGqEHK",
        "outputId": "82e32b99-f797-4c8b-b5f0-7a6542ca5caf"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+---+\n",
            "|age|\n",
            "+---+\n",
            "| 25|\n",
            "| 22|\n",
            "| 29|\n",
            "| 27|\n",
            "| 26|\n",
            "| 23|\n",
            "| 28|\n",
            "| 24|\n",
            "| 29|\n",
            "| 27|\n",
            "+---+\n",
            "\n",
            "+---------+--------+---+------+------+------------+------+--------------------+------+---------------+\n",
            "|person_id|    name|age|gender|job_id|age_category|job_id|           job_title|salary|salary_category|\n",
            "+---------+--------+---+------+------+------------+------+--------------------+------+---------------+\n",
            "|       12|   Linda| 23|     F|     1|       Jovem|     1|             Manager| 60000|          Medio|\n",
            "|       11|   Kevin| 34|     M|     2|      Adulto|     2|           Developer| 50000|          Baixo|\n",
            "|        3| Charlie| 28|     M|     3|       Jovem|     3|             Analyst| 45000|          Baixo|\n",
            "|        8|   Helen| 27|     F|     3|       Jovem|     3|             Analyst| 45000|          Baixo|\n",
            "|        7|  George| 31|     M|     4|      Adulto|     4|            Designer| 55000|          Medio|\n",
            "|       19|   Steve| 35|     M|     4|      Adulto|     4|            Designer| 55000|          Medio|\n",
            "|       20|    Tina| 27|     F|     4|       Jovem|     4|            Designer| 55000|          Medio|\n",
            "|        1|   Alice| 25|     F|     5|       Jovem|     5|              Tester| 40000|          Baixo|\n",
            "|        2|     Bob| 30|     M|     5|      Adulto|     5|              Tester| 40000|          Baixo|\n",
            "|        6|   Fiona| 29|     F|     5|       Jovem|     5|              Tester| 40000|          Baixo|\n",
            "|       15|  Oliver| 36|     M|     6|      Adulto|     6|Sales Representative| 48000|          Baixo|\n",
            "|       14|   Nancy| 28|     F|     8|       Jovem|     8|          Accountant| 50000|          Baixo|\n",
            "|       13|    Mike| 32|     M|     9|      Adulto|     9|          HR Officer| 47000|          Baixo|\n",
            "|        5|     Eve| 22|     F|    10|       Jovem|    10|  Operations Manager| 62000|          Medio|\n",
            "|        4|   David| 35|     M|    11|      Adulto|    11|     Project Manager| 65000|          Medio|\n",
            "|       16|Patricia| 24|     F|    13|       Jovem|    13|    Business Analyst| 53000|          Baixo|\n",
            "|       17| Quentin| 31|     M|    15|      Adulto|    15|    Customer Service| 43000|          Baixo|\n",
            "|       18|  Rachel| 29|     F|    16|       Jovem|    16| Executive Assistant| 51000|          Baixo|\n",
            "|        9|     Ian| 33|     M|    17|      Adulto|    17|       Legal Counsel| 80000|           Alto|\n",
            "|       10|    Jane| 26|     F|    18|       Jovem|    18|   Financial Analyst| 57000|          Medio|\n",
            "+---------+--------+---+------+------+------------+------+--------------------+------+---------------+\n",
            "\n"
          ]
        }
      ]
    }
  ]
}